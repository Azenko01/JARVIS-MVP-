#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è JARVIS
"""

import asyncio
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
import subprocess
import psutil
from PIL import ImageGrab
import io

class JarvisTelegramBot:
    def __init__(self, token, authorized_users=None):
        self.token = token
        self.authorized_users = authorized_users or []
        self.app = None
        self.jarvis_instance = None
        
    def set_jarvis_instance(self, jarvis):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏–π JARVIS"""
        self.jarvis_instance = jarvis
    
    def is_authorized(self, user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return not self.authorized_users or user_id in self.authorized_users
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        if not self.is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è JARVIS.")
            return
        
        keyboard = [
            [InlineKeyboardButton("üé§ –°—Ç–∞—Ç—É—Å JARVIS", callback_data="status")],
            [InlineKeyboardButton("üì± –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="system_info")],
            [InlineKeyboardButton("üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç", callback_data="screenshot")],
            [InlineKeyboardButton("üìã –ö–æ–º–∞–Ω–¥–∏", callback_data="commands")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ –í—ñ—Ç–∞—é! –Ø JARVIS Telegram Bot.\n"
            "–ß–µ—Ä–µ–∑ –º–µ–Ω–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ JARVIS –Ω–∞ –≤–∞—à–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä—ñ.\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=reply_markup
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if not self.is_authorized(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        if query.data == "status":
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if self.jarvis_instance and self.jarvis_instance.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            await query.edit_message_text(f"üìä –°—Ç–∞—Ç—É—Å JARVIS: {status}")
            
        elif query.data == "system_info":
            info = await self.get_system_info()
            await query.edit_message_text(f"üíª –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n\n{info}")
            
        elif query.data == "screenshot":
            await self.send_screenshot(query)
            
        elif query.data == "commands":
            commands_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

üé§ –ì–æ–ª–æ—Å–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:
‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç - JARVIS –≤–∏–∫–æ–Ω–∞—î —è–∫ –≥–æ–ª–æ—Å–æ–≤—É –∫–æ–º–∞–Ω–¥—É

üíª –°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
‚Ä¢ /screenshot - –∑—Ä–æ–±–∏—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
‚Ä¢ /apps - —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º
‚Ä¢ /weather - –ø–æ–≥–æ–¥–∞

üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è:
‚Ä¢ /start_jarvis - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ JARVIS
‚Ä¢ /stop_jarvis - –∑—É–ø–∏–Ω–∏—Ç–∏ JARVIS
            """
            await query.edit_message_text(commands_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —è–∫ –∫–æ–º–∞–Ω–¥"""
        user_id = update.effective_user.id
        if not self.is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        message_text = update.message.text
        
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —á–µ—Ä–µ–∑ JARVIS
        if self.jarvis_instance:
            try:
                await update.message.reply_text("üîÑ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É...")
                
                # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
                response = await self.jarvis_instance.execute_command(message_text)
                
                await update.message.reply_text(f"ü§ñ JARVIS: {response}")
                
            except Exception as e:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {str(e)}")
        else:
            await update.message.reply_text("‚ùå JARVIS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    
    async def screenshot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /screenshot"""
        user_id = update.effective_user.id
        if not self.is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        await self.send_screenshot(update)
    
    async def send_screenshot(self, update_or_query):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
            screenshot = ImageGrab.grab()
            
            # –ó–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –¥–ª—è Telegram
            screenshot.thumbnail((1280, 720), Image.Resampling.LANCZOS)
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ø–∞–º'—è—Ç—å
            bio = io.BytesIO()
            screenshot.save(bio, format='PNG')
            bio.seek(0)
            
            if hasattr(update_or_query, 'message'):
                # –¶–µ Update –∑ –∫–æ–º–∞–Ω–¥–∏
                await update_or_query.message.reply_photo(
                    photo=bio,
                    caption="üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –µ–∫—Ä–∞–Ω—É"
                )
            else:
                # –¶–µ CallbackQuery –∑ –∫–Ω–æ–ø–∫–∏
                await update_or_query.message.reply_photo(
                    photo=bio,
                    caption="üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –µ–∫—Ä–∞–Ω—É"
                )
                
        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {str(e)}"
            if hasattr(update_or_query, 'message'):
                await update_or_query.message.reply_text(error_msg)
            else:
                await update_or_query.edit_message_text(error_msg)
    
    async def get_system_info(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            info = f"""
üñ•Ô∏è CPU: {cpu_percent}%
üß† RAM: {memory.percent}% ({memory.used // (1024**3)} GB / {memory.total // (1024**3)} GB)
üíæ –î–∏—Å–∫: {disk.percent}% ({disk.used // (1024**3)} GB / {disk.total // (1024**3)} GB)
            """
            return info.strip()
            
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {str(e)}"
    
    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /weather"""
        user_id = update.effective_user.id
        if not self.is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        try:
            from plugins.weather import get_weather
            weather_info = await get_weather()
            await update.message.reply_text(f"üå§Ô∏è {weather_info}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏: {str(e)}")
    
    async def apps_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /apps - —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º"""
        user_id = update.effective_user.id
        if not self.is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
                try:
                    if proc.info['cpu_percent'] > 0:
                        processes.append(f"‚Ä¢ {proc.info['name']} (CPU: {proc.info['cpu_percent']:.1f}%)")
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            if processes:
                apps_text = "üñ•Ô∏è –ê–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏:\n\n" + "\n".join(processes[:10])
            else:
                apps_text = "–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                
            await update.message.reply_text(apps_text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    
    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("screenshot", self.screenshot_command))
        self.app.add_handler(CommandHandler("weather", self.weather_command))
        self.app.add_handler(CommandHandler("apps", self.apps_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.app = Application.builder().token(self.token).build()
            self.setup_handlers()
            
            logging.info("Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
            await self.app.run_polling()
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
async def start_telegram_bot(token, authorized_users=None, jarvis_instance=None):
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    bot = JarvisTelegramBot(token, authorized_users)
    if jarvis_instance:
        bot.set_jarvis_instance(jarvis_instance)
    
    await bot.start_bot()

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if __name__ == "__main__":
    # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
    AUTHORIZED_USERS = [123456789]  # ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    asyncio.run(start_telegram_bot(BOT_TOKEN, AUTHORIZED_USERS))
