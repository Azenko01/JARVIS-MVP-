#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–æ–ª–æ–≤–Ω–∏–π GUI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è JARVIS v2.0
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import threading
import asyncio
import queue
import json
from datetime import datetime
from pathlib import Path
import sys
import os

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import Config
from memory.learner import JarvisLearner
from memory.vector_knowledge import vector_kb

class JarvisGUI:
    def __init__(self):
        self.config = Config()
        self.learner = JarvisLearner()
        self.jarvis_instance = None
        self.message_queue = queue.Queue()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        self.root = tk.Tk()
        self.root.title("ü§ñ JARVIS v2.0 - AI Desktop Assistant")
        self.root.geometry("1200x800")
        self.root.configure(bg='#1a1a1a')
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
        self.setup_styles()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.process_messages()
        
        # –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        self.auto_update()
    
    def setup_styles(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –¢–µ–º–Ω–∞ —Ç–µ–º–∞
        style.configure('Dark.TFrame', background='#1a1a1a')
        style.configure('Dark.TLabel', background='#1a1a1a', foreground='#ffffff', font=('Segoe UI', 10))
        style.configure('Dark.TButton', background='#3a3a3a', foreground='#ffffff', font=('Segoe UI', 9))
        style.configure('Chat.TFrame', background='#2a2a2a', relief='solid', borderwidth=1)
        
        # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤
        style.configure('Success.TLabel', background='#1a1a1a', foreground='#4CAF50', font=('Segoe UI', 10, 'bold'))
        style.configure('Error.TLabel', background='#1a1a1a', foreground='#F44336', font=('Segoe UI', 10, 'bold'))
        style.configure('Warning.TLabel', background='#1a1a1a', foreground='#FF9800', font=('Segoe UI', 10, 'bold'))
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, style='Dark.TFrame')
        main_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å
        self.create_header(main_container)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –Ω–∞ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏)
        content_frame = ttk.Frame(main_container, style='Dark.TFrame')
        content_frame.pack(fill='both', expand=True, pady=(10, 0))
        
        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - —á–∞—Ç
        self.create_chat_panel(content_frame)
        
        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –ø–∞–Ω–µ–ª—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        self.create_control_panels(content_frame)
        
        # –ù–∏–∂–Ω—è –ø–∞–Ω–µ–ª—å
        self.create_footer(main_container)
    
    def create_header(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = ttk.Frame(parent, style='Dark.TFrame')
        header_frame.pack(fill='x', pady=(0, 10))
        
        # –õ–æ–≥–æ—Ç–∏–ø —Ç–∞ –Ω–∞–∑–≤–∞
        title_frame = ttk.Frame(header_frame, style='Dark.TFrame')
        title_frame.pack(side='left')
        
        title_label = ttk.Label(
            title_frame, 
            text="ü§ñ JARVIS v2.0", 
            font=('Segoe UI', 18, 'bold'),
            style='Dark.TLabel'
        )
        title_label.pack(side='left')
        
        subtitle_label = ttk.Label(
            title_frame, 
            text="AI Desktop Assistant", 
            font=('Segoe UI', 10),
            style='Dark.TLabel'
        )
        subtitle_label.pack(side='left', padx=(10, 0))
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
        status_frame = ttk.Frame(header_frame, style='Dark.TFrame')
        status_frame.pack(side='right')
        
        self.status_label = ttk.Label(
            status_frame, 
            text="üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π", 
            style='Error.TLabel'
        )
        self.status_label.pack(side='right')
        
        # API —Å—Ç–∞—Ç—É—Å–∏
        api_frame = ttk.Frame(status_frame, style='Dark.TFrame')
        api_frame.pack(side='right', padx=(0, 20))
        
        api_status = self.config.get_api_status()
        
        self.openai_status = ttk.Label(
            api_frame, 
            text="üîë OpenAI: " + ("‚úÖ" if api_status['openai'] else "‚ùå"),
            style='Success.TLabel' if api_status['openai'] else 'Error.TLabel'
        )
        self.openai_status.pack(side='right', padx=(0, 10))
        
        self.telegram_status = ttk.Label(
            api_frame, 
            text="üì± Telegram: " + ("‚úÖ" if api_status['telegram'] else "‚ùå"),
            style='Success.TLabel' if api_status['telegram'] else 'Error.TLabel'
        )
        self.telegram_status.pack(side='right', padx=(0, 10))
    
    def create_chat_panel(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —á–∞—Ç—É"""
        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - —á–∞—Ç (70% —à–∏—Ä–∏–Ω–∏)
        chat_frame = ttk.Frame(parent, style='Chat.TFrame')
        chat_frame.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç—É
        chat_header = ttk.Label(
            chat_frame, 
            text="üí¨ –ß–∞—Ç –∑ JARVIS", 
            font=('Segoe UI', 12, 'bold'),
            style='Dark.TLabel'
        )
        chat_header.pack(pady=10)
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç—É
        self.chat_display = scrolledtext.ScrolledText(
            chat_frame,
            height=25,
            bg='#2a2a2a',
            fg='#ffffff',
            font=('Consolas', 11),
            wrap=tk.WORD,
            state='disabled'
        )
        self.chat_display.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.chat_display.tag_configure("user", foreground="#4CAF50", font=('Consolas', 11, 'bold'))
        self.chat_display.tag_configure("jarvis", foreground="#2196F3", font=('Consolas', 11, 'bold'))
        self.chat_display.tag_configure("system", foreground="#FF9800", font=('Consolas', 10, 'italic'))
        self.chat_display.tag_configure("error", foreground="#F44336", font=('Consolas', 11, 'bold'))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥—É
        input_frame = ttk.Frame(chat_frame, style='Dark.TFrame')
        input_frame.pack(fill='x', padx=10, pady=(0, 10))
        
        self.message_entry = tk.Text(
            input_frame,
            height=3,
            bg='#3a3a3a',
            fg='#ffffff',
            font=('Segoe UI', 11),
            wrap=tk.WORD
        )
        self.message_entry.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(input_frame, style='Dark.TFrame')
        buttons_frame.pack(side='right', fill='y')
        
        send_btn = ttk.Button(
            buttons_frame,
            text="üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏",
            command=self.send_message,
            style='Dark.TButton'
        )
        send_btn.pack(fill='x', pady=(0, 5))
        
        voice_btn = ttk.Button(
            buttons_frame,
            text="üé§ –ì–æ–ª–æ—Å",
            command=self.toggle_voice,
            style='Dark.TButton'
        )
        voice_btn.pack(fill='x', pady=(0, 5))
        
        clear_btn = ttk.Button(
            buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
            command=self.clear_chat,
            style='Dark.TButton'
        )
        clear_btn.pack(fill='x')
        
        # –ü—Ä–∏–≤'—è–∑–∫–∞ Enter –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        self.message_entry.bind('<Control-Return>', lambda e: self.send_message())
    
    def create_control_panels(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª–µ–π —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –ø–∞–Ω–µ–ª—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (30% —à–∏—Ä–∏–Ω–∏)
        control_frame = ttk.Frame(parent, style='Dark.TFrame')
        control_frame.pack(side='right', fill='y', padx=(10, 0))
        control_frame.configure(width=350)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(control_frame)
        notebook.pack(fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        self.create_control_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.create_stats_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è
        self.create_learning_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.create_settings_tab(notebook)
    
    def create_control_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
        control_tab = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(control_tab, text="üéõÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è JARVIS
        jarvis_frame = ttk.LabelFrame(control_tab, text="JARVIS –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", style='Dark.TFrame')
        jarvis_frame.pack(fill='x', padx=10, pady=10)
        
        self.start_btn = ttk.Button(
            jarvis_frame,
            text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ JARVIS",
            command=self.start_jarvis,
            style='Dark.TButton'
        )
        self.start_btn.pack(fill='x', padx=5, pady=5)
        
        self.stop_btn = ttk.Button(
            jarvis_frame,
            text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ JARVIS",
            command=self.stop_jarvis,
            style='Dark.TButton',
            state='disabled'
        )
        self.stop_btn.pack(fill='x', padx=5, pady=5)
        
        # –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏
        quick_frame = ttk.LabelFrame(control_tab, text="–®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏", style='Dark.TFrame')
        quick_frame.pack(fill='x', padx=10, pady=10)
        
        quick_commands = [
            ("üå§Ô∏è –ü–æ–≥–æ–¥–∞", "—è–∫–∞ –ø–æ–≥–æ–¥–∞"),
            ("üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç", "–∑—Ä–æ–±–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç"),
            ("üéµ –ú—É–∑–∏–∫–∞", "–≤–∫–ª—é—á–∏ –º—É–∑–∏–∫—É"),
            ("üíª –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "—Å–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        ]
        
        for text, command in quick_commands:
            btn = ttk.Button(
                quick_frame,
                text=text,
                command=lambda cmd=command: self.send_quick_command(cmd),
                style='Dark.TButton'
            )
            btn.pack(fill='x', padx=5, pady=2)
        
        # –§–∞–π–ª–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        file_frame = ttk.LabelFrame(control_tab, text="–§–∞–π–ª–∏", style='Dark.TFrame')
        file_frame.pack(fill='x', padx=10, pady=10)
        
        pdf_btn = ttk.Button(
            file_frame,
            text="üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF",
            command=self.load_pdf,
            style='Dark.TButton'
        )
        pdf_btn.pack(fill='x', padx=5, pady=5)
        
        export_btn = ttk.Button(
            file_frame,
            text="üíæ –ï–∫—Å–ø–æ—Ä—Ç —á–∞—Ç—É",
            command=self.export_chat,
            style='Dark.TButton'
        )
        export_btn.pack(fill='x', padx=5, pady=5)
    
    def create_stats_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_tab = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(stats_tab, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        general_frame = ttk.LabelFrame(stats_tab, text="–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", style='Dark.TFrame')
        general_frame.pack(fill='x', padx=10, pady=10)
        
        self.stats_labels = {}
        
        stats_items = [
            ("–í—Å—å–æ–≥–æ –≤–∑–∞—î–º–æ–¥—ñ–π:", "total_interactions"),
            ("–£—Å–ø—ñ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:", "successful_commands"),
            ("–ü–æ–º–∏–ª–æ–∫:", "failed_commands"),
            ("–ö–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:", "custom_commands"),
            ("–î–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ:", "knowledge_documents")
        ]
        
        for i, (label_text, key) in enumerate(stats_items):
            frame = ttk.Frame(general_frame, style='Dark.TFrame')
            frame.pack(fill='x', padx=5, pady=2)
            
            label = ttk.Label(frame, text=label_text, style='Dark.TLabel')
            label.pack(side='left')
            
            value_label = ttk.Label(frame, text="0", style='Success.TLabel')
            value_label.pack(side='right')
            
            self.stats_labels[key] = value_label
        
        # –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–∑–∞–≥–ª—É—à–∫–∞)
        activity_frame = ttk.LabelFrame(stats_tab, text="–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", style='Dark.TFrame')
        activity_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.activity_text = scrolledtext.ScrolledText(
            activity_frame,
            height=10,
            bg='#2a2a2a',
            fg='#ffffff',
            font=('Consolas', 9)
        )
        self.activity_text.pack(fill='both', expand=True, padx=5, pady=5)
    
    def create_learning_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è"""
        learning_tab = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(learning_tab, text="üß† –ù–∞–≤—á–∞–Ω–Ω—è")
        
        # –ö–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        commands_frame = ttk.LabelFrame(learning_tab, text="–ö–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏", style='Dark.TFrame')
        commands_frame.pack(fill='x', padx=10, pady=10)
        
        add_command_btn = ttk.Button(
            commands_frame,
            text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É",
            command=self.add_custom_command,
            style='Dark.TButton'
        )
        add_command_btn.pack(fill='x', padx=5, pady=5)
        
        view_commands_btn = ttk.Button(
            commands_frame,
            text="üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥–∏",
            command=self.view_custom_commands,
            style='Dark.TButton'
        )
        view_commands_btn.pack(fill='x', padx=5, pady=5)
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω—å
        knowledge_frame = ttk.LabelFrame(learning_tab, text="–ë–∞–∑–∞ –∑–Ω–∞–Ω—å", style='Dark.TFrame')
        knowledge_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        update_kb_btn = ttk.Button(
            knowledge_frame,
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É –∑–Ω–∞–Ω—å",
            command=self.update_knowledge_base,
            style='Dark.TButton'
        )
        update_kb_btn.pack(fill='x', padx=5, pady=5)
        
        search_kb_btn = ttk.Button(
            knowledge_frame,
            text="üîç –ü–æ—à—É–∫ –≤ –±–∞–∑—ñ",
            command=self.search_knowledge,
            style='Dark.TButton'
        )
        search_kb_btn.pack(fill='x', padx=5, pady=5)
        
        # –°–ø–∏—Å–æ–∫ –∑–Ω–∞–Ω—å
        self.knowledge_list = scrolledtext.ScrolledText(
            knowledge_frame,
            height=8,
            bg='#2a2a2a',
            fg='#ffffff',
            font=('Consolas', 9)
        )
        self.knowledge_list.pack(fill='both', expand=True, padx=5, pady=5)
    
    def create_settings_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        settings_tab = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(settings_tab, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # –ì–æ–ª–æ—Å–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        voice_frame = ttk.LabelFrame(settings_tab, text="–ì–æ–ª–æ—Å", style='Dark.TFrame')
        voice_frame.pack(fill='x', padx=10, pady=10)
        
        # –®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è
        ttk.Label(voice_frame, text="–®–≤–∏–¥–∫—ñ—Å—Ç—å:", style='Dark.TLabel').pack(anchor='w', padx=5)
        self.voice_rate_var = tk.IntVar(value=self.config.VOICE_RATE)
        voice_rate_scale = ttk.Scale(
            voice_frame, 
            from_=50, 
            to=300, 
            variable=self.voice_rate_var,
            orient='horizontal'
        )
        voice_rate_scale.pack(fill='x', padx=5, pady=5)
        
        # –ì—É—á–Ω—ñ—Å—Ç—å
        ttk.Label(voice_frame, text="–ì—É—á–Ω—ñ—Å—Ç—å:", style='Dark.TLabel').pack(anchor='w', padx=5)
        self.voice_volume_var = tk.DoubleVar(value=self.config.VOICE_VOLUME)
        voice_volume_scale = ttk.Scale(
            voice_frame, 
            from_=0.0, 
            to=1.0, 
            variable=self.voice_volume_var,
            orient='horizontal'
        )
        voice_volume_scale.pack(fill='x', padx=5, pady=5)
        
        # API –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        api_frame = ttk.LabelFrame(settings_tab, text="API", style='Dark.TFrame')
        api_frame.pack(fill='x', padx=10, pady=10)
        
        test_openai_btn = ttk.Button(
            api_frame,
            text="üîë –¢–µ—Å—Ç OpenAI",
            command=self.test_openai,
            style='Dark.TButton'
        )
        test_openai_btn.pack(fill='x', padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_btn = ttk.Button(
            settings_tab,
            text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            command=self.save_settings,
            style='Dark.TButton'
        )
        save_btn.pack(side='bottom', fill='x', padx=10, pady=10)
    
    def create_footer(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∏–∂–Ω—å–æ—ó –ø–∞–Ω–µ–ª—ñ"""
        footer_frame = ttk.Frame(parent, style='Dark.TFrame')
        footer_frame.pack(fill='x', pady=(10, 0))
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ—Ä—Å—ñ—é
        version_label = ttk.Label(
            footer_frame, 
            text=f"JARVIS v{self.config.VERSION} by {self.config.AUTHOR}", 
            style='Dark.TLabel'
        )
        version_label.pack(side='left')
        
        # –ß–∞—Å —Ä–æ–±–æ—Ç–∏
        self.uptime_label = ttk.Label(
            footer_frame, 
            text="–ß–∞—Å —Ä–æ–±–æ—Ç–∏: 00:00:00", 
            style='Dark.TLabel'
        )
        self.uptime_label.pack(side='right')
    
    def add_message(self, sender, message, msg_type="normal"):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É"""
        self.chat_display.configure(state='normal')
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        if sender == "user":
            self.chat_display.insert(tk.END, f"[{timestamp}] üë§ –í–∏: ", "user")
            self.chat_display.insert(tk.END, f"{message}\n\n")
        elif sender == "jarvis":
            self.chat_display.insert(tk.END, f"[{timestamp}] ü§ñ JARVIS: ", "jarvis")
            self.chat_display.insert(tk.END, f"{message}\n\n")
        elif sender == "system":
            self.chat_display.insert(tk.END, f"[{timestamp}] ‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞: ", "system")
            self.chat_display.insert(tk.END, f"{message}\n\n")
        elif sender == "error":
            self.chat_display.insert(tk.END, f"[{timestamp}] ‚ùå –ü–æ–º–∏–ª–∫–∞: ", "error")
            self.chat_display.insert(tk.END, f"{message}\n\n")
        
        self.chat_display.configure(state='disabled')
        self.chat_display.see(tk.END)
    
    def send_message(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        message = self.message_entry.get("1.0", tk.END).strip()
        if not message:
            return
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –≤–≤–æ–¥—É
        self.message_entry.delete("1.0", tk.END)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–∞—Ç—É
        self.add_message("user", message)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ JARVIS (—è–∫—â–æ –∑–∞–ø—É—â–µ–Ω–∏–π)
        if self.jarvis_instance and self.jarvis_instance.is_active:
            threading.Thread(
                target=self.process_jarvis_command, 
                args=(message,), 
                daemon=True
            ).start()
        else:
            self.add_message("system", "JARVIS –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ JARVIS'")
    
    def send_quick_command(self, command):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —à–≤–∏–¥–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏"""
        self.message_entry.delete("1.0", tk.END)
        self.message_entry.insert("1.0", command)
        self.send_message()
    
    def process_jarvis_command(self, message):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ —á–µ—Ä–µ–∑ JARVIS"""
        try:
            # –¢—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ JARVIS
            response = f"–û–±—Ä–æ–±–ª—è—é –∫–æ–º–∞–Ω–¥—É: {message}"
            self.message_queue.put(("jarvis", response))
        except Exception as e:
            self.message_queue.put(("error", str(e)))
    
    def start_jarvis(self):
        """–ó–∞–ø—É—Å–∫ JARVIS"""
        try:
            self.add_message("system", "–ó–∞–ø—É—Å–∫–∞—é JARVIS...")
            
            # –¢—É—Ç –±—É–¥–µ –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ JARVIS
            # from main import JarvisAssistant
            # self.jarvis_instance = JarvisAssistant()
            
            self.status_label.configure(text="üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π", style='Success.TLabel')
            self.start_btn.configure(state='disabled')
            self.stop_btn.configure(state='normal')
            
            self.add_message("system", "JARVIS —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!")
            
        except Exception as e:
            self.add_message("error", f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É JARVIS: {str(e)}")
    
    def stop_jarvis(self):
        """–ó—É–ø–∏–Ω–∫–∞ JARVIS"""
        try:
            self.add_message("system", "–ó—É–ø–∏–Ω—è—é JARVIS...")
            
            if self.jarvis_instance:
                self.jarvis_instance.is_active = False
                self.jarvis_instance = None
            
            self.status_label.configure(text="üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π", style='Error.TLabel')
            self.start_btn.configure(state='normal')
            self.stop_btn.configure(state='disabled')
            
            self.add_message("system", "JARVIS –∑—É–ø–∏–Ω–µ–Ω–∏–π")
            
        except Exception as e:
            self.add_message("error", f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ JARVIS: {str(e)}")
    
    def toggle_voice(self):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É"""
        self.add_message("system", "–ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
    
    def clear_chat(self):
        """–û—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É"""
        self.chat_display.configure(state='normal')
        self.chat_display.delete(1.0, tk.END)
        self.chat_display.configure(state='disabled')
    
    def load_pdf(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF —Ñ–∞–π–ª—É"""
        file_path = filedialog.askopenfilename(
            title="–û–±–µ—Ä—ñ—Ç—å PDF —Ñ–∞–π–ª",
            filetypes=[("PDF files", "*.pdf")]
        )
        
        if file_path:
            self.add_message("system", f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é PDF: {Path(file_path).name}")
            # –¢—É—Ç –±—É–¥–µ –æ–±—Ä–æ–±–∫–∞ PDF
            threading.Thread(
                target=self.process_pdf, 
                args=(file_path,), 
                daemon=True
            ).start()
    
    def process_pdf(self, file_path):
        """–û–±—Ä–æ–±–∫–∞ PDF —Ñ–∞–π–ª—É"""
        try:
            # –¢—É—Ç –±—É–¥–µ –æ–±—Ä–æ–±–∫–∞ PDF —á–µ—Ä–µ–∑ learner
            self.message_queue.put(("system", f"PDF {Path(file_path).name} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π"))
        except Exception as e:
            self.message_queue.put(("error", f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ PDF: {str(e)}"))
    
    def export_chat(self):
        """–ï–∫—Å–ø–æ—Ä—Ç —á–∞—Ç—É"""
        file_path = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ —á–∞—Ç",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                chat_content = self.chat_display.get(1.0, tk.END)
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(chat_content)
                self.add_message("system", f"–ß–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {Path(file_path).name}")
            except Exception as e:
                self.add_message("error", f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {str(e)}")
    
    def add_custom_command(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏"""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
        dialog = CustomCommandDialog(self.root)
        if dialog.result:
            command, action = dialog.result
            # –¢—É—Ç –±—É–¥–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —á–µ—Ä–µ–∑ learner
            self.add_message("system", f"–î–æ–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: {command}")
    
    def view_custom_commands(self):
        """–ü–µ—Ä–µ–≥–ª—è–¥ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥"""
        # –¢—É—Ç –±—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –∑ learner
        commands = []  # self.learner.get_custom_commands()
        
        if commands:
            commands_text = "\n".join([f"‚Ä¢ {cmd}" for cmd in commands])
        else:
            commands_text = "–ö–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∏ –Ω–µ–º–∞—î"
        
        messagebox.showinfo("–ö–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏", commands_text)
    
    def update_knowledge_base(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
        self.add_message("system", "–û–Ω–æ–≤–ª—é—é –±–∞–∑—É –∑–Ω–∞–Ω—å...")
        threading.Thread(target=self._update_kb_thread, daemon=True).start()
    
    def _update_kb_thread(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            # –¢—É—Ç –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ learner
            self.message_queue.put(("system", "–ë–∞–∑–∞ –∑–Ω–∞–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–∞"))
        except Exception as e:
            self.message_queue.put(("error", f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {str(e)}"))
    
    def search_knowledge(self):
        """–ü–æ—à—É–∫ –≤ –±–∞–∑—ñ –∑–Ω–∞–Ω—å"""
        query = tk.simpledialog.askstring("–ü–æ—à—É–∫", "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É:")
        if query:
            # –¢—É—Ç –±—É–¥–µ –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ vector_kb
            results = []  # vector_kb.search(query)
            
            if results:
                results_text = "\n".join([f"‚Ä¢ {result}" for result in results])
            else:
                results_text = "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É", results_text)
    
    def test_openai(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è OpenAI API"""
        self.add_message("system", "–¢–µ—Å—Ç—É—é OpenAI API...")
        threading.Thread(target=self._test_openai_thread, daemon=True).start()
    
    def _test_openai_thread(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è OpenAI –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            # –¢—É—Ç –±—É–¥–µ —Ç–µ—Å—Ç API
            self.message_queue.put(("system", "OpenAI API –ø—Ä–∞—Ü—é—î"))
        except Exception as e:
            self.message_queue.put(("error", f"OpenAI API –ø–æ–º–∏–ª–∫–∞: {str(e)}"))
    
    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        try:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≥–æ–ª–æ—Å—É
            # self.config.VOICE_RATE = self.voice_rate_var.get()
            # self.config.VOICE_VOLUME = self.voice_volume_var.get()
            
            self.add_message("system", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        except Exception as e:
            self.add_message("error", f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {str(e)}")
    
    def update_stats(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = self.learner.get_statistics()
            vector_stats = vector_kb.get_statistics()
            
            self.stats_labels['total_interactions'].configure(text=str(stats.get('total_interactions', 0)))
            self.stats_labels['custom_commands'].configure(text=str(stats.get('custom_commands', 0)))
            self.stats_labels['knowledge_documents'].configure(text=str(vector_stats.get('total_documents', 0)))
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def process_messages(self):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —á–µ—Ä–≥–∏"""
        try:
            while True:
                sender, message = self.message_queue.get_nowait()
                self.add_message(sender, message)
        except queue.Empty:
            pass
        
        # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        self.root.after(100, self.process_messages)
    
    def auto_update(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        self.update_stats()
        
        # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        self.root.after(5000, self.auto_update)  # –ö–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.mainloop()

class CustomCommandDialog:
    """–î—ñ–∞–ª–æ–≥ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏"""
    def __init__(self, parent):
        self.result = None
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–î–æ–¥–∞—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—É –∫–æ–º–∞–Ω–¥—É")
        self.dialog.geometry("400x200")
        self.dialog.configure(bg='#1a1a1a')
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –ü–æ–ª—è –≤–≤–æ–¥—É
        ttk.Label(self.dialog, text="–ö–æ–º–∞–Ω–¥–∞:", style='Dark.TLabel').pack(pady=5)
        self.command_entry = tk.Entry(self.dialog, width=50, bg='#3a3a3a', fg='#ffffff')
        self.command_entry.pack(pady=5)
        
        ttk.Label(self.dialog, text="–î—ñ—è:", style='Dark.TLabel').pack(pady=5)
        self.action_entry = tk.Entry(self.dialog, width=50, bg='#3a3a3a', fg='#ffffff')
        self.action_entry.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(self.dialog, style='Dark.TFrame')
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text="–î–æ–¥–∞—Ç–∏", command=self.ok_clicked).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", command=self.cancel_clicked).pack(side='left', padx=5)
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä—à–æ–º—É –ø–æ–ª—ñ
        self.command_entry.focus()
    
    def ok_clicked(self):
        command = self.command_entry.get().strip()
        action = self.action_entry.get().strip()
        
        if command and action:
            self.result = (command, action)
            self.dialog.destroy()
    
    def cancel_clicked(self):
        self.dialog.destroy()

def main():
    """–ó–∞–ø—É—Å–∫ GUI"""
    try:
        app = JarvisGUI()
        app.run()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É GUI: {e}")

if __name__ == "__main__":
    main()
