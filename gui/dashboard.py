#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Dashboard) –¥–ª—è JARVIS
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import asyncio
from datetime import datetime
import sys
import os

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from memory.learner import JarvisLearner
from config import Config

class JarvisDashboard:
    def __init__(self):
        self.config = Config()
        self.learner = JarvisLearner()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        self.root = tk.Tk()
        self.root.title("JARVIS MVP Dashboard")
        self.root.geometry("800x600")
        self.root.configure(bg='#1e1e1e')
        
        # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è
        self.setup_styles()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.update_data()
    
    def setup_styles(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –¢–µ–º–Ω–∞ —Ç–µ–º–∞
        style.configure('TLabel', background='#1e1e1e', foreground='#ffffff')
        style.configure('TButton', background='#3e3e3e', foreground='#ffffff')
        style.configure('TFrame', background='#1e1e1e')
        style.configure('TNotebook', background='#1e1e1e')
        style.configure('TNotebook.Tab', background='#3e3e3e', foreground='#ffffff')
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root)
        title_frame.pack(fill='x', padx=10, pady=5)
        
        title_label = ttk.Label(
            title_frame, 
            text="ü§ñ JARVIS MVP Dashboard", 
            font=('Arial', 16, 'bold')
        )
        title_label.pack(side='left')
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(
            title_frame, 
            text="–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–∏–π", 
            font=('Arial', 10)
        )
        self.status_label.pack(side='right')
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó
        self.create_history_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.create_stats_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∫–æ–º–∞–Ω–¥
        self.create_commands_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.create_settings_tab()
        
        # –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        self.create_control_panel()
    
    def create_history_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó"""
        history_frame = ttk.Frame(self.notebook)
        self.notebook.add(history_frame, text="üìú –Ü—Å—Ç–æ—Ä—ñ—è")
        
        # –°–ø–∏—Å–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ–π
        self.history_text = scrolledtext.ScrolledText(
            history_frame,
            height=20,
            bg='#2e2e2e',
            fg='#ffffff',
            font=('Consolas', 10)
        )
        self.history_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        refresh_btn = ttk.Button(
            history_frame,
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
            command=self.refresh_history
        )
        refresh_btn.pack(pady=5)
    
    def create_stats_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(stats_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –§—Ä–µ–π–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_info_frame = ttk.Frame(stats_frame)
        stats_info_frame.pack(fill='x', padx=10, pady=10)
        
        # –õ–µ–π–±–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_labels = {}
        
        stats_items = [
            ("–í—Å—å–æ–≥–æ –≤–∑–∞—î–º–æ–¥—ñ–π:", "total_interactions"),
            ("–ö–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:", "custom_commands"),
            ("–ó–∞–ø–∏—Å—ñ–≤ –∑–Ω–∞–Ω—å:", "knowledge_count"),
            ("–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", "last_update")
        ]
        
        for i, (label_text, key) in enumerate(stats_items):
            label = ttk.Label(stats_info_frame, text=label_text, font=('Arial', 12))
            label.grid(row=i, column=0, sticky='w', pady=5)
            
            value_label = ttk.Label(stats_info_frame, text="0", font=('Arial', 12, 'bold'))
            value_label.grid(row=i, column=1, sticky='w', padx=(10, 0), pady=5)
            
            self.stats_labels[key] = value_label
    
    def create_commands_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∫–æ–º–∞–Ω–¥"""
        commands_frame = ttk.Frame(self.notebook)
        self.notebook.add(commands_frame, text="‚ö° –ö–æ–º–∞–Ω–¥–∏")
        
        # –°–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
        commands_label = ttk.Label(
            commands_frame, 
            text="–ö–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:", 
            font=('Arial', 12, 'bold')
        )
        commands_label.pack(anchor='w', padx=10, pady=(10, 5))
        
        self.commands_text = scrolledtext.ScrolledText(
            commands_frame,
            height=15,
            bg='#2e2e2e',
            fg='#ffffff',
            font=('Consolas', 10)
        )
        self.commands_text.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∞–º–∏
        commands_btn_frame = ttk.Frame(commands_frame)
        commands_btn_frame.pack(fill='x', padx=10, pady=5)
        
        refresh_commands_btn = ttk.Button(
            commands_btn_frame,
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏",
            command=self.refresh_commands
        )
        refresh_commands_btn.pack(side='left', padx=(0, 5))
        
        clear_commands_btn = ttk.Button(
            commands_btn_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏",
            command=self.clear_commands
        )
        clear_commands_btn.pack(side='left')
    
    def create_settings_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
        voice_frame = ttk.LabelFrame(settings_frame, text="–ì–æ–ª–æ—Å–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        voice_frame.pack(fill='x', padx=10, pady=10)
        
        # –®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è
        ttk.Label(voice_frame, text="–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è:").grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.voice_rate_var = tk.IntVar(value=self.config.VOICE_RATE)
        voice_rate_scale = ttk.Scale(
            voice_frame, 
            from_=50, 
            to=300, 
            variable=self.voice_rate_var,
            orient='horizontal'
        )
        voice_rate_scale.grid(row=0, column=1, sticky='ew', padx=5, pady=5)
        
        # –ì—É—á–Ω—ñ—Å—Ç—å
        ttk.Label(voice_frame, text="–ì—É—á–Ω—ñ—Å—Ç—å:").grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.voice_volume_var = tk.DoubleVar(value=self.config.VOICE_VOLUME)
        voice_volume_scale = ttk.Scale(
            voice_frame, 
            from_=0.0, 
            to=1.0, 
            variable=self.voice_volume_var,
            orient='horizontal'
        )
        voice_volume_scale.grid(row=1, column=1, sticky='ew', padx=5, pady=5)
        
        voice_frame.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        save_settings_btn = ttk.Button(
            settings_frame,
            text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            command=self.save_settings
        )
        save_settings_btn.pack(pady=10)
    
    def create_control_panel(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è"""
        control_frame = ttk.Frame(self.root)
        control_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        start_btn = ttk.Button(
            control_frame,
            text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ JARVIS",
            command=self.start_jarvis
        )
        start_btn.pack(side='left', padx=(0, 5))
        
        stop_btn = ttk.Button(
            control_frame,
            text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ JARVIS",
            command=self.stop_jarvis
        )
        stop_btn.pack(side='left', padx=(0, 5))
        
        test_voice_btn = ttk.Button(
            control_frame,
            text="üîä –¢–µ—Å—Ç –≥–æ–ª–æ—Å—É",
            command=self.test_voice
        )
        test_voice_btn.pack(side='left', padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É
        exit_btn = ttk.Button(
            control_frame,
            text="‚ùå –í–∏—Ö—ñ–¥",
            command=self.exit_application
        )
        exit_btn.pack(side='right')
    
    def refresh_history(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∑–∞—î–º–æ–¥—ñ–π"""
        try:
            history = self.learner.get_interaction_history(50)
            
            self.history_text.delete(1.0, tk.END)
            
            for interaction in history:
                timestamp = interaction['timestamp']
                user_input = interaction['user_input']
                jarvis_response = interaction['jarvis_response']
                
                self.history_text.insert(tk.END, f"[{timestamp}]\n")
                self.history_text.insert(tk.END, f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_input}\n")
                if jarvis_response:
                    self.history_text.insert(tk.END, f"ü§ñ JARVIS: {jarvis_response}\n")
                self.history_text.insert(tk.END, "-" * 50 + "\n\n")
            
            self.history_text.see(tk.END)
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é: {e}")
    
    def refresh_commands(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥"""
        try:
            import sqlite3
            
            with sqlite3.connect(self.learner.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT command_pattern, action_description, usage_count 
                    FROM custom_commands 
                    ORDER BY usage_count DESC
                ''')
                commands = cursor.fetchall()
            
            self.commands_text.delete(1.0, tk.END)
            
            if commands:
                for pattern, description, usage_count in commands:
                    self.commands_text.insert(tk.END, f"–ö–æ–º–∞–Ω–¥–∞: {pattern}\n")
                    self.commands_text.insert(tk.END, f"–î—ñ—è: {description}\n")
                    self.commands_text.insert(tk.END, f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å: {usage_count}\n")
                    self.commands_text.insert(tk.END, "-" * 40 + "\n\n")
            else:
                self.commands_text.insert(tk.END, "–ö–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∏ –Ω–µ–º–∞—î.\n")
                self.commands_text.insert(tk.END, "–°–∫–∞–∂—ñ—Ç—å JARVIS '–Ω–∞–≤—á–∏—Å—è –Ω–æ–≤—ñ–π –∫–æ–º–∞–Ω–¥—ñ' –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è.")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏: {e}")
    
    def clear_commands(self):
        """–û—á–∏—â–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥"""
        result = messagebox.askyesno(
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
            "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∫–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏?"
        )
        
        if result:
            try:
                import sqlite3
                
                with sqlite3.connect(self.learner.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute('DELETE FROM custom_commands')
                    conn.commit()
                
                self.refresh_commands()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ö–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏: {e}")
    
    def update_data(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ –¥–∞—à–±–æ—Ä–¥—ñ"""
        try:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.learner.get_statistics()
            
            for key, value in stats.items():
                if key in self.stats_labels:
                    self.stats_labels[key].config(text=str(value))
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
            if self.notebook.index(self.notebook.select()) == 0:  # –Ø–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó
                self.refresh_history()
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        
        # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        self.root.after(5000, self.update_data)  # –ö–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    
    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        try:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {e}")
    
    def start_jarvis(self):
        """–ó–∞–ø—É—Å–∫ JARVIS"""
        try:
            # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–∞–ø—É—Å–∫—É JARVIS –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
            messagebox.showinfo("JARVIS", "JARVIS –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
            self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∏–π")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ JARVIS: {e}")
            self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ü–æ–º–∏–ª–∫–∞")
    
    def stop_jarvis(self):
        """–ó—É–ø–∏–Ω–∫–∞ JARVIS"""
        try:
            self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ó—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
            messagebox.showinfo("JARVIS", "JARVIS –∑—É–ø–∏–Ω–µ–Ω–æ.")
            self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—É–ø–∏–Ω–∏—Ç–∏ JARVIS: {e}")
    
    def test_voice(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É"""
        try:
            # –¢—É—Ç –±—É–¥–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑—É
            messagebox.showinfo("–¢–µ—Å—Ç –≥–æ–ª–æ—Å—É", "–¢–µ—Å—Ç—É—é –≥–æ–ª–æ—Å JARVIS...")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É: {e}")
    
    def exit_application(self):
        """–í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏"""
        result = messagebox.askyesno("–í–∏—Ö—ñ–¥", "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏?")
        if result:
            self.root.quit()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.mainloop()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É GUI"""
    try:
        dashboard = JarvisDashboard()
        dashboard.run()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É GUI: {e}")

if __name__ == "__main__":
    main()
