#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ JARVIS
"""

import asyncio
import speech_recognition as sr
import sys
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

async def test_microphone():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞"""
    print("=== –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ú–Ü–ö–†–û–§–û–ù–ê ===")
    
    try:
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∏
        mic_list = sr.Microphone.list_microphone_names()
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(mic_list)} –º—ñ–∫—Ä–æ—Ñ–æ–Ω—ñ–≤:")
        
        for i, name in enumerate(mic_list):
            print(f"  [{i}] {name}")
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
        recognizer = sr.Recognizer()
        
        for i in range(min(3, len(mic_list))):  # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à—ñ 3
            print(f"\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ [{i}]: {mic_list[i]}")
            
            try:
                with sr.Microphone(device_index=i) as source:
                    print("–ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è...")
                    recognizer.adjust_for_ambient_noise(source, duration=1)
                    
                    print("–°–∫–∞–∂—ñ—Ç—å —â–æ—Å—å (5 —Å–µ–∫—É–Ω–¥)...")
                    audio = recognizer.listen(source, timeout=5, phrase_time_limit=3)
                    
                    print("–†–æ–∑–ø—ñ–∑–Ω–∞—é...")
                    text = recognizer.recognize_google(audio, language="uk-UA")
                    print(f"‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: {text}")
                    
                    return i  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å —Ä–æ–±–æ—á–æ–≥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
                    
            except sr.WaitTimeoutError:
                print("‚ùå –¢–∞–π–º–∞—É—Ç - –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–Ω–æ")
            except sr.UnknownValueError:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        return None
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
        return None

async def test_speaker():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫—ñ–≤"""
    print("\n=== –¢–ï–°–¢–£–í–ê–ù–ù–Ø –î–ò–ù–ê–ú–Ü–ö–Ü–í ===")
    
    try:
        from voice.speaker import VoiceSpeaker
        
        speaker = VoiceSpeaker()
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–ª–æ—Å–∏
        voices = speaker.get_available_voices()
        print(f"–î–æ—Å—Ç—É–ø–Ω–æ {len(voices)} –≥–æ–ª–æ—Å—ñ–≤:")
        
        for voice in voices[:3]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ 3
            print(f"  - {voice['name']} ({voice.get('gender', 'Unknown')})")
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
        print("\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É...")
        await speaker.speak("–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ JARVIS")
        
        return True
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –¥–∏–Ω–∞–º—ñ–∫—ñ–≤: {e}")
        return False

async def test_activation():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏—Ö —Ñ—Ä–∞–∑"""
    print("\n=== –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–ö–¢–ò–í–ê–¶–Ü–á ===")
    
    try:
        from voice.listener import VoiceListener
        
        listener = VoiceListener()
        
        print("–°–∫–∞–∂—ñ—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω—É —Ñ—Ä–∞–∑—É: '–ü—Ä–∏–≤—ñ—Ç, –î–∂–∞—Ä–≤—ñ—Å'")
        
        for attempt in range(3):
            print(f"–°–ø—Ä–æ–±–∞ {attempt + 1}/3...")
            
            text = await listener.listen_for_activation()
            
            if text:
                print(f"–ü–æ—á—É–≤: {text}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏—Ö —Ñ—Ä–∞–∑
                text_lower = text.lower()
                activation_phrases = ["–ø—Ä–∏–≤—ñ—Ç –¥–∂–∞—Ä–≤—ñ—Å", "–¥–∂–∞—Ä–≤—ñ—Å", "jarvis"]
                
                if any(phrase in text_lower for phrase in activation_phrases):
                    print("‚úÖ –ê–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω–∞ —Ñ—Ä–∞–∑–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞!")
                    return True
                else:
                    print("‚ùå –¶–µ –Ω–µ –∞–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω–∞ —Ñ—Ä–∞–∑–∞")
            else:
                print("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ—á—É–≤")
        
        return False
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: {e}")
        return False

async def full_voice_test():
    """–ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
    print("üé§ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ì–û–õ–û–°–û–í–û–á –°–ò–°–¢–ï–ú–ò JARVIS")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
    working_mic = await test_microphone()
    
    if working_mic is None:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –ø—Ä–∞—Ü—é—î!")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞")
        print("2. –ù–∞–¥–∞–π—Ç–µ –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞")
        print("3. –ó–∞–∫—Ä–∏–π—Ç–µ —ñ–Ω—à—ñ –ø—Ä–æ–≥—Ä–∞–º–∏, —â–æ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω")
        return False
    
    print(f"\n‚úÖ –†–æ–±–æ—á–∏–π –º—ñ–∫—Ä–æ—Ñ–æ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ: —ñ–Ω–¥–µ–∫—Å {working_mic}")
    
    # –¢–µ—Å—Ç –¥–∏–Ω–∞–º—ñ–∫—ñ–≤
    speaker_ok = await test_speaker()
    
    if not speaker_ok:
        print("\n‚ùå –ü–û–ú–ò–õ–ö–ê: –î–∏–Ω–∞–º—ñ–∫–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å!")
        return False
    
    print("\n‚úÖ –î–∏–Ω–∞–º—ñ–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å")
    
    # –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    activation_ok = await test_activation()
    
    if not activation_ok:
        print("\n‚ùå –ü–û–ú–ò–õ–ö–ê: –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î!")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        print("1. –ì–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫–æ —Ç–∞ –≥–æ–ª–æ—Å–Ω–æ")
        print("2. –ó–º–µ–Ω—à—ñ—Ç—å —Ñ–æ–Ω–æ–≤–∏–π —à—É–º")
        print("3. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç–∏ '–ü—Ä–∏–≤—ñ—Ç, –î–∂–∞—Ä–≤—ñ—Å' –∞–±–æ '–î–∂–∞—Ä–≤—ñ—Å'")
        return False
    
    print("\nüéâ –í–°–ï –ü–†–ê–¶–Æ–Ñ! –ì–æ–ª–æ—Å–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.")
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    print(f"\nüíæ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω –∑ —ñ–Ω–¥–µ–∫—Å–æ–º: {working_mic}")
    print("–î–æ–¥–∞–π—Ç–µ –≤ config.py:")
    print(f"MICROPHONE_INDEX = {working_mic}")
    
    return True

if __name__ == "__main__":
    try:
        result = asyncio.run(full_voice_test())
        
        if result:
            print("\n‚úÖ –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ JARVIS!")
        else:
            print("\n‚ùå –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º JARVIS")
            
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
